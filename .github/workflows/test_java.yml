name: Java Tests

on:
  workflow_call:
    inputs:
      safe-checkout:
        required: true
        description: "The SHA key for the commit we want to run over"
        type: string

permissions:
  contents: read

jobs:
  linux:
    strategy:
      fail-fast: false
      matrix:
        bazel-version: ['7.1.2']
        include:
          - name: OpenJDK 8
            version: '8'
            image: us-docker.pkg.dev/protobuf-build/containers/test/linux/java:8-23af5a0a246d26a2b8b658392d234be545f9c202
            # TODO: b/318555165 - enable the layering check. Currently it does
            # not work correctly with the toolchain in this Docker image.
            targets: //java/... //java/internal:java_version //compatibility/... --features=-layering_check
          - name: OpenJDK 11
            version: '11'
            image: us-docker.pkg.dev/protobuf-build/containers/test/linux/java@sha256:f0a43fe8eb5a5180b4207f23d4ad9ebf618b1b78d3403eeeb4e7e45c9b1c7a9d
            targets: //java/... //java/internal:java_version //compatibility/...
          - name: OpenJDK 17
            version: '17'
            image: us-docker.pkg.dev/protobuf-build/containers/test/linux/java@sha256:fe556e90c77901a63d5acf0567bd33130125d5fe4d50af20271f8a32314a5bc6
            targets: //java/... //java/internal:java_version //compatibility/...
          - name: aarch64
            version: 'aarch64'
            image: us-docker.pkg.dev/protobuf-build/containers/test/linux/emulation:${{ matrix.bazel-version }}-aarch64-f42c2179c00aaa8fedfe95cdc0bf14e862541604
            targets: //java/... //compatibility/... //src/google/protobuf/compiler:protoc_aarch64_test

    name: Linux ${{ matrix.name }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout pending changes
        uses: protocolbuffers/protobuf-ci/checkout@v3
        with:
          ref: ${{ inputs.safe-checkout }}
      - name: Run tests
        uses: protocolbuffers/protobuf-ci/bazel-docker@v3
        with:
          image: ${{ matrix.image }}
          credentials: ${{ secrets.GAR_SERVICE_ACCOUNT }}
          bazel-cache: java_linux/${{ matrix.version }}
          bazel: test ${{ matrix.targets }} --test_env=KOKORO_JAVA_VERSION

# TODO restore this test (or a better one) when gRPC has rebuilt with 26.x
  # linkage-monitor:
  #   name: Linux Linkage Monitor
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout pending changes
  #       uses: protocolbuffers/protobuf-ci/checkout@v3
  #       with:
  #         ref: ${{ inputs.safe-checkout }}
  #     - name: Run Linkage Monitor test
  #       uses: protocolbuffers/protobuf-ci/bazel-docker@v3
  #       with:
  #         image: us-docker.pkg.dev/protobuf-build/containers/test/linux/java:8-1fdbb997433cb22c1e49ef75ad374a8d6bb88702
  #         credentials: ${{ secrets.GAR_SERVICE_ACCOUNT }}
  #         bazel-cache: java_linux/8
  #         # TODO: b/318555165 - enable the layering check. Currently it does
  #         # not work correctly with the toolchain in this Docker image.
  #         bazel: test --test_output=all //java:linkage_monitor --spawn_strategy=standalone --features=-layering_check
  
  protobuf-bom:
    name: Protobuf Maven BOM
    runs-on: ubuntu-latest
    steps:
    - name: Checkout pending changes
      uses: protocolbuffers/protobuf-ci/checkout@v3
      with:
        ref: ${{ inputs.safe-checkout }}
    - name: Build protoc
      id: build-protoc
      uses: protocolbuffers/protobuf-ci/cross-compile-protoc@v3
      with:
        image: us-docker.pkg.dev/protobuf-build/containers/common/linux/bazel:{{ matrix.bazel-version }}-bec4e87effd62da1d4f9a13d377e37bcb80376c9
        credentials: ${{ secrets.GAR_SERVICE_ACCOUNT }}
        architecture: linux-x86_64
    - name: Move protoc into place and clean up
      run: |
        mv ${{ steps.build-protoc.outputs.protoc }} protoc
        sudo rm -rf _build
    - name: Install snapshot version locally (not using generated pom.xml)
      run: |
        mvn -X -e -B -Dhttps.protocols=TLSv1.2 install -Dmaven.test.skip=true
      working-directory: java
    - name: Generate pom.xml files from the template
      uses: protocolbuffers/protobuf-ci/bazel-docker@v3
      with:
        image: us-docker.pkg.dev/protobuf-build/containers/test/linux/java:11-21efb73c613deddd6db6a0a86f262324a77de13f
        credentials: ${{ secrets.GAR_SERVICE_ACCOUNT }}
        bazel-cache: java_linux/11
        # protobuf-java and protobuf-java-util are the member of the BOM
        bash: |
          bazel build //java/core:core_mvn-pom //java/util:util_mvn-pom
          cp bazel-bin/java/core/core_mvn-pom.xml .
          cp bazel-bin/java/util/util_mvn-pom.xml .
    - name: Copy the generated pom.xml files to the local Maven repository
      shell: bash
      run: |
        LOCAL_MAVEN_GROUP_DIR="${HOME}/.m2/repository/com/google/protobuf"
        VERSION=$(grep "<version>" core_mvn-pom.xml | sed "s/<version>\(.*\)<\/version>/\1/" | xargs)
        cp core_mvn-pom.xml ${LOCAL_MAVEN_GROUP_DIR}/protobuf-java/${VERSION}/protobuf-java-${VERSION}.pom
        cp util_mvn-pom.xml ${LOCAL_MAVEN_GROUP_DIR}/protobuf-java-util/${VERSION}/protobuf-java-util-${VERSION}.pom
    - name: Clean up
      run: |
        sudo rm -rf _build
    - name: Validate Protobuf BOM
      uses: googleapis/java-cloud-bom/tests/validate-bom@fd56f04bb0bc581776a74031591f0b3bc5e7920a # v26.13.0
      with:
        bom-path: java/bom/pom.xml
